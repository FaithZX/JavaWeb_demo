1、jdk中如何使用定时任务
   涉及的类：java.util.TimerTask，java.util.Timer
   1、编写任务处理类
	public class JdkTimeTask extends TimerTask {
		@Override
		public void run() {
			System.out.println("我是一个定时任务处理类");
		}
	}
	2、设置定时任务
	Timer timer = new Timer();
	//第二个参数延时时间 第三个参数是 每隔多少秒执行
	timer.schedule(new JdkTimeTask(), 0, 1000);
	
2、如何使用quartz实现定时任务 拷贝quartz-all-1.6.1.jar
	涉及到得类
	 org.quartz.Job;//定时任务处理类
	 org.quartz.CronExpression;//任务的描述表达式
	 org.quartz.JobDetail;
	 org.quartz.CronTrigger;//触发器
	 org.quartz.SimpleTrigger;
	 org.quartz.Scheduler;//计划
	 org.quartz.SchedulerFactory;
	 org.quartz.impl.StdSchedulerFactory;
	1、编写一个任务实现job接口 
	public class MyJob implements Job {
		public void execute(JobExecutionContext context)
				throws JobExecutionException {
			System.out.println("我是一个任务");
		}
	}
	2、如何启动定时任务，和jdbc的效果一样
		//创建jobDetail对象
		JobDetail jobDetail = new JobDetail("myjob", "jobgroup", MyJob.class);
		
		//创建一个触发器对象
		SimpleTrigger simpleTrigger = new SimpleTrigger("myjobtg", "tgGroup");
		simpleTrigger.setStartTime(new Date());
		simpleTrigger.setRepeatCount(10);//重复的次数
		simpleTrigger.setRepeatInterval(1000);//循环的时间
		
		// 创建一个schedulerFactory
		SchedulerFactory schedulerFactory = new StdSchedulerFactory();
		//获取scheduler对象
		Scheduler scheduler = schedulerFactory.getScheduler();
		//添加任务
		scheduler.scheduleJob(jobDetail, simpleTrigger);
		//启动计划
		scheduler.start();	
3.如何设置规定时间运行的任务，只需要改变触发器的类型就可以了
	org.quartz.CronTrigger;
	org.quartz.CronExpression;
	注意表达式的写法
	//创建jobDetail对象
		JobDetail jobDetail = new JobDetail("myjob", "jobgroup", MyJob.class);
		
		//创建一个触发器对象
		//SimpleTrigger simpleTrigger = new SimpleTrigger("myjobtg", "tgGroup");
		CronTrigger conCronTrigger = new CronTrigger("myjobtg", "tgGroup");
		
		CronExpression conExpression =  new CronExpression("0 38/1 13-16 * * ? *");
		conCronTrigger.setCronExpression(conExpression);
		
		// 创建一个schedulerFactory
		SchedulerFactory schedulerFactory = new StdSchedulerFactory();
		//获取scheduler对象
		Scheduler scheduler = schedulerFactory.getScheduler();
		//添加任务
		scheduler.scheduleJob(jobDetail, conCronTrigger);
		//启动计划
		scheduler.start();
	
4、如何在spring中使用定时任务
	涉及到的类有
	org.springframework.scheduling.quartz.QuartzJobBean
	org.springframework.scheduling.quartz.JobDetailBean
	org.springframework.scheduling.quartz.SimpleTriggerBean或者
	org.springframework.scheduling.quartz.CronTriggerBean
	org.springframework.scheduling.quartz.SchedulerFactoryBean
	
	1、创建一个定时任务处理类
	public class SpringQuartz extends QuartzJobBean {

	@Override
	protected void executeInternal(JobExecutionContext arg0)
			throws JobExecutionException {
		System.out.println("我是定时任务");

	}

	}
	
	2、在spring的配置文件中做配置
	
	
	<!-- 第一步 声明一个定时任务,注意不是直接声明,而是声明一个JobDetailBean,通过jobClass属性设置一个定时对象 -->  
	<!--setJobClass()-->
	<bean id="quartzClock" class="org.springframework.scheduling.quartz.JobDetailBean">  
	 	<property name="jobClass">  
	 		<value>com.kaka.time.quartz.spring.SpringQuartz</value>
	 	</property>  
	 </bean>  

<!--	 第二步 调度定时任务 
	<bean id="quartzClockTask" class="org.springframework.scheduling.quartz.SimpleTriggerBean">  
	 	<property name="jobDetail"> 
	 		<ref bean="quartzClock"/> 
	 	</property> 
	 	<property name="startDelay">  
	 		<value>1000</value> 
	 	</property>
	 	<property name="repeatInterval">  
	 		<value>1000</value> 
	 	</property>
	 </bean>
  -->
	 <!-- 这种配置可以精确几点执行定时任务-->

	  <bean id="cronQuartzClock" class="org.springframework.scheduling.quartz.CronTriggerBean"> 
		  <property name="jobDetail">  
		 	 <ref bean="quartzClock"></ref>  
		  </property>  
		  <property name="cronExpression">  
		  	<value>0 58/1 13-16 * * ? *</value>
		  </property>  

	</bean>  
   
	 <!--第三步 启动定时任务,注意这里的ref bean -->

	 <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
	 	<property name="triggers">
		 	<list>  
		 		<ref bean="cronQuartzClock"></ref>
		 	</list>  
	 	</property> 
	 </bean> 	